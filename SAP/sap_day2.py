# -*- coding: utf-8 -*-
"""SAP DAY2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/191s6xYa7tg6neP457AI2NtrxuPGMeESr

### Welcome Back

Quick refresher 
By now, your are expected to be conversant with how to :
- print hello world 
- create a variable named my_name and assign the your name to it
- Get the length of the user's name using the function len()
- Convert your name to all lower case using my_name.lower()
- convert your name to all upper case
- Write a program to check a user's age; if age is less than 20, print you're lucky to be here, if age is between 20 and 25, print make good use of this opportunity, if age is above 25, print You are welcome, here?

Implementation of this is in the next cell
- Write a programme to comment on how interesting a football match was;
 - If no goals were scored, Python should say “the game was a bore draw!”
 - 1-2 goals: “Not the most interesting game"
 - 3-5 goals: “It was a very interesting game”
 - 6+ goals: “The football match was an unmissable game!”

### ASSIGNMENT 1
- Write a program to calculate the square of a number if the number is greater than zero
- Reproduce this calculator output:
 - Welcome to our calculator
 - Enter the first number: 
 - Enter the second number: 
 - Choose one of the following operations:
 - 1 - addition
 - 2 - subtraction
 - 3 - multiplication
 - 4 - division
 - result: 
 - Thank you for using our calculator.
"""

'''
Write a programme to comment on how interesting a football match was;
If no goals were scored, Python should say “the game was a bore draw!”
1-2 goals: “Not the most interesting game"
3-5 goals: “It was a very interesting game”
6+ goals: “The football match was an unmissable game!”
'''
goals_scored = input('How many goals were scored in the last match? ')
goals_scored = int(goals_scored)                  # To convert user input to an integer
if goals_scored < 0:                         # To check for invalid age input
    print('You have entered an invalid scores')
elif goals_scored  == 0:
    print('The game was a bore draw')
elif goals_scored <=2:
    print('Not the most interesting game')
elif goals_scored <=5:
    print('It was a very interesting game')
else:                                    # This condition considers every other age bracket not included
    print('The football match was an unmissable game!')

"""# 
### SAP Second Class 10th April, 2020
# ..................................................................................

## Class activity
####Solve this on your own before looking at the implementation in the next cell
Find the average of the following numbers:
- 1, 2, 3, 4, 5, 6, 7, 7
"""

''' To get the average of 1, 2, 3, 4, 5, 6, 7, 7, we will need
numbers = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 7
sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 7
length = the total time we spend looping on the entire element of numbers
avg = sum /
'''


# Solution 1 - without for loop
numbers = [1, 2, 3, 4, 5, 6, 7, 7]
numbers_sum = sum(numbers) #using a SUM Function on the List
length_of_list = len(numbers)
average = numbers_sum / length_of_list
print('The average of the sum of 1, 2, 3, 4, 5, 6, 7, 7 without looping is ', average)

# Solution 1b - without for loop omitting few lines
numbers = list((1, 2,3,4,5,6,7,7))
average = (sum(numbers)/len(numbers))
print('Same as solution1 but shorter \nThe average of the sum of 1, 2, 3, 4, 5, 6, 7, 7 without looping is ', average)


#Check another sOlution under FOR Statement

"""### Ranges
a range() is used to create a list of numbers to manipulate iteration. Range() function in Python is to iterate sequence type (List, string etc.. ) with for and while loop.
Syntax : range(start, stop, step) or range(length_of_number)

Write a program that prints all the numbers from 0 to 10 skipping every second digits
"""

for i in range(0, 10, 2):
  print(i)

for i in range(5):
  print (i)

"""### FOR Statement, WHILE Loop
The **for** statement is used to iterate over a piece of code which you want to repeat for n number of time. 

*Like an IF statement,* The **while loop** tells the computer to do something as long as the conditions are met. The conditions are evaluated, and if the condition is true, the code within the block is executed. *Just like for statement,* execution of the code within the block repeats until the condition becomes false. 

Write a program that prints all the numbers from 0 to 10 skipping every second digits
"""

# Short code to countdown from 10 to 1 using a for loop
for a in range (10, 0, -1):
    print(a)

# Short code to countdown from 10 to 1 using a while loop
a = 10
while a > 0:
    print(a)
    a = a - 1

word = "computer"
for letter in word:
    print (letter)

word = "computer"
i = 0
while i < len(word):
  print (word[i]) #At the first iteration word[0] = c; later word[1] = o
  i = i + 1

'''
Another while loop
This program shows multiples of 5 i.e Mltiplication table 5
'''
a = 5
b = 1
while b <= 12:
    print('%d * %d = %d' %(a, b, a*b))
    b = b + 1

"""### ASSIGNMENT 2
Implement the Multiplication table 5 above using **FOR** Statement
"""

'''Another example utilizing while loops
This program starts printing from i's current value (1), 
and continues printing until it reaches 3 where it stops
'''
i = 0
while i < 6:
    print(i)
    if i == 3:
        break
    i = i + 1

"""### List, Tuple, Dictionary
More data types/Structure and their attributes

- List
 - Ordered
 - Changeable
 - Indexed
 - Can have duplicate members
 - my_list = [3, 4, 2, 6, 5, 3, 3, 9]
 - my_list2 = list((4, 4, 2, 5, 7))
- Tuple : Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
 - Ordered
 - Unchangeable
 - Indexed
 - Can also have duplicate members
 - fruits = ('Mango', 'Grape', 'Pear')
 - fruits2 = tuple(('Coconut', 'Cashew', 'Cucumber'))
- Set : Set is a collection which is unordered and unindexed. No duplicate members.
 - Unordered
 - Unindexed
 - No duplicate members
 - Cars = {'Mercedes', 'Toyota', 'Honda'}
 - Cars2 = set(('Kia', 'Ford', 'Fiat'))
- Dictionaries : Dictionary is a collection items which are unordered, changeable and indexed. No duplicate members. Dictionary has a key: value pair
 - Unordered
 - Changeable
 - Indexed
 - Has keys and values
 - my_car = {"brand": "Honda", "model": "EOD", "year": 2010}
"""

#List
my_list = ['pot', 'kettle', 'spoon', 'plate']
my_list2 = list(('pot', 'kettle', 'spoon', 'plate'))

#Tuple
fruits = ('mango', 'apple', 'orange')
fruits2 = tuple(('mango', 'apple', 'orange'))

#Set
cars = {'mercedes', 'toyota', 'ford'}
cars2 = set('mercedes')

#Dictionary
my_dict = {'name': 'John', 1: [2, 4, 3]} # dictionary with mixed keys
thisdict = {"brand": "Toyota", "model": "Avalon", "year": 2017}

"""### List

Using a for loop, find the average of the following numbers:

1, 2, 3, 4, 5, 6, 7, 7
"""

# Solution 2 from the Class Activity
numbers = [1, 2, 3, 4, 5, 6, 7, 7] # or list((1, 2, 3, 4, 5, 6, 7, 7))
numbers_sum = 0  
length_of_list = 0
for i in numbers:
    numbers_sum = numbers_sum + i  # At the first iteration, numbers_sum = 0 + 1
    length_of_list = length_of_list + 1
average = numbers_sum / length_of_list
print('The average of the sum of 1, 2, 3, 4, 5, 6, 7, 7 using loop is ', average)

"""### List Operations"""

a = list((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))

for vj in a:
    print(vj%2 == 1)

for vj in a:
    if vj%2 == 1:
        print(vj)

A = [2, 'Clement', 6, 'Ope', 8, 'Ayo']

#Accessing the 3rd and 4th elements of list using their index.
print ('3rd and 4th elements using positive index', A[2:4],  '\n')

#Negative indices can also bde specified
print ( '3rd and 4th elements using negative index', A[-3:-1]) #this produces a list


#list concatenation
print(A + ['Ayo', 'Peace', 14])

#The in and not in operators:
print('Ope'in A)

print('Abebe' not in A)

print(2.45 in A)

print ('y' in A)

"""### List Methods

As we have in string methods, a list  data type can be also be used with the list methods some of which are:
"""

#METHODS

my_list = ['pot', 'kettle', 'spoon', 'plate']

# append: to add a new item to the end of the list
my_list.append('knife')
print(my_list)

# extend: Add the elements of a list, to the end of the current list. 
# Unlike .append(), .extend() will unpack the  new list and add its element each to the existing one 
my_list.extend(['fork', 'flask', 'file'])
print(my_list)

# copy: Returns a copy of the list
my_list3 = my_list.copy()
print(my_list, my_list3)

# count: Returns the number of elements with the specified value
knife_count = my_list.count('knife')
print(my_list, knife_count)

# index: Returns the index of the first element with the specified value
x = my_list.index('kettle')
print(my_list, x)

# insert: Adds an element at the specified position
my_list.insert(3, 'Yam')
print(my_list)

# pop: Removes the element at the specified position or the last item if no position is given
my_list.pop(3)
print(my_list)

# remove: Removes the first item with the specified value
my_list.remove('fork')
print(my_list)

# reverse: Reverses the order of the list
my_list.reverse()
print(my_list)

# sort: Sorts the list
my_list.sort()
print(my_list)

# clear: to remove all the elements from the list
my_list.clear()
print(my_list)

"""### List Comprehensions
List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.
"""

#To create a list of sum of squares

sum = []
for x in range(5):
    sum.append(x**2)
print('output using for', sum)

#The same could be written as a lis95t comprehension
sum = [x**2 for x in range(5)]
print ('output using list comprehension', sum)

#Using for statement to print a number and its square as coordinates

result= []
for x in range(6):
    result.append((x,x**2))
print('output using for', result)

#With list comprehension

print('output using list comprehension', [(x, x**2) for x in range(6)])

"""### Tuple

A list of methods that can be used with the tuple data type includes:
"""

fruits = ('mango', 'apple', 'orange', 'grape', 'pear')

# count: Returns the number of times a specified value occurs in a tuple
x = fruits.count('apple')
print(fruits, x)

# index: Searches the tuple for a specified value and returns the position of where it was found
y = fruits.index('orange')
print(fruits, y)

"""### Set
A list of methods that can be used with the set data type
"""

cars = {'mercedes', 'toyota', 'ford', 'Porsche'}
cars2 = {'mercedes', 'Nissan', 'Jaguar'}
# add: Adds an element to the set
cars.add('Hyundai')
print(cars)

# copy: Returns a copy of the set
cars_copy = cars.copy()
print(cars, cars_copy)

# difference: Returns a set containing the difference between two or more sets
car_diff = cars.difference(cars2)
print(cars, cars2, car_diff)

# difference_update: Removes the items in this set that are also included in another, specified set
cars.difference_update(cars2)
print(cars, cars2)

# discard: Remove the specified item
cars2.discard('Nissan')
print(cars2)

# intersection: Returns a set, that is the intersection of two other sets
cars_intersect = cars.intersection(cars2)
print(cars, cars2, cars_intersect)

# intersection_update: Removes the items in this set that are not present in other, specified set(s)
cars_copy.intersection_update(cars2)
print(cars_copy, cars2)

# isdisjoint: Returns whether two sets have a intersection or not
disj = cars.isdisjoint(cars2)
print(cars, cars2, disj)

# issubset: Returns whether another set contains this set or not
x = {'a', 'b', 'c'}
y = {'a', 'b', 'c', 'd', 'e', 'f'}
z = x.issubset(y)
print(x, y, z)

# issuperset: Returns whether this set contains another set or not
z = y.issuperset(x)
print(x, y, z)

# pop: Removes an element from the set
y.pop()
print(y)

# remove: Removes the specified element
y.remove('c')
print(y)

# symmetric_difference: Returns a set with the symmetric differences of two sets
sym_diff = cars.symmetric_difference(cars2)
print(cars, cars2, sym_diff)

# symmetric_difference_update: inserts the symmetric differences from this set and another
cars.symmetric_difference_update(cars2)
print(cars)

# union: Return a set containing the union of sets
bigcars = cars.union(cars2)
print(cars, cars2, bigcars)

# update: Update the set with the union of this set and others
cars.update(cars2)
print(cars, cars2)

# clear: Removes all the elements from the set
cars.clear()
print(cars)

"""### Dictionary

A list of methods that can be used with the dictionary data type
"""

thisdict = {"brand": "Toyota", "model": "Avalon", "year": 2017}

# fromkeys: returns a dictionary with the specified keys and values
x = ('key1', 'key2', 'key3')
y = (0)       #All the keys will have the same value 0
new_dict = dict.fromkeys(x, y)
print(new_dict)

# get: Returns the value of the specified key, if value is not fount, it returns NONE
a = thisdict.get('model')

# same output can be gotten from but if value is not found, it returns error
b = thisdict['model']
print(thisdict, a, b)

# copy: Returns a copy of the dictionary
new_dict = thisdict.copy()
print(thisdict, new_dict)

# items: Returns a list containing a tuple for each key value pair
a = thisdict.items()
print('Dictionary', thisdict, 'items are : ', a)

# keys: Returns a list containing the dictionary's keys
a = thisdict.keys()
print(thisdict, a)

a = thisdict.values()
print(thisdict, a)

# pop: Removes the element with the specified key
print(new_dict)
new_dict.pop('model')
print(new_dict)

# popitem: Removes the last inserted key-value pair
c = new_dict.popitem()
print(new_dict, c)

# setdefault: Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
x = new_dict.setdefault('model', 'Camry')
print(new_dict, x)

# update: Updates the dictionary with the specified key-value pairs
thisdict.update({'color': 'white'})
print(thisdict)

# values: Returns a list of all the values in the dictionary
x = thisdict.values()
print(thisdict, x)

# clear: to remove all the elements from the dictionary
new_dict.clear()
print(new_dict)

"""### Homework

- Given a list of movies, write a movie ticket program that allows people aged 1-3 and 65+ free access and a complementary box of popcorn, 4-15 get 50% discount if with a student id and 25% discount without a student id, others (16 - 64) pay full fee. Everyone gets 10% off their respective fees and a bottle of coke free for movies showing on Monday morning.

- Write a program that prints all the numbers from 0 to 6 except 3 and 6
- Write a Python program to guess a number between 1 to 9.
 - Note : User is prompted to enter a guess. If the user guesses wrong then the prompt appears again until the guess is correct, on successful guess, user will get a "Well guessed!" message, and the program will exit.
 - Hint: 
   - import random 
   - hidden_number = random.randint(1, 10) 
   - guess_num = 0 
   - while (your condition statement here):
      (more code here)
   - print('Well guessed!')

*Given that:*

A = [5, 8, 15, 7, 3]

- Write a Python program to sum all the items in A

*Given that* 

Months = ['January', 'February', 'AYO', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October', 'November']

-  Write a Python program to
Get Months sorted in ascending order
Add 'December' to months
remove/delete 'AYO' from months


-
"""

