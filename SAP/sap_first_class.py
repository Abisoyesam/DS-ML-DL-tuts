# -*- coding: utf-8 -*-
"""SAP First class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1McdKmeMhvfVJlWC6kotJbIp3uwtoHJWP

# Fundamentals of Python Programming for Data Science

Day1: 

Aim of the training and Deliverables
Anaconda Environment Setup and Installation

- #### Operators and mathematical operations
- #### Variables
- #### Data Types
- #### Commenting in Pyton
- #### Input and output
## Program Flow Control 
- #### If, elif and else statements
- #### For loops
- #### While loops

# Section 1: Common mathematical operators and operations
Operators are signs and symbols used to join two (2) numbers, variables (operands) While Operation is just a process of joining 2 or more numbers, variables together to form a meaningful expression. SOme basic python operators are:
Addition (+)

Subtraction (-)

Multiplication (*)

Division (/)

Floor Division (//): returns the Quotient part (whole number) of the result and truncates the remainder

Modulus: returns the remainder part of the result and truncates the quotient

Index/Exponent (e): Mathematical exponentials

Parentheses () :Used to indicate order of execution of arithmethic expression eg. P = (A-B) + D will follow

Let (A-B) = C
P = c +
Note: Number of opening parenthesis must be equal to the number of close parenthesis ie. (()), ((()))
"""

52 + 45

34 - 65

65/5

9//2

1 + 4.2e-3, 5 * .4e7

"""## Class Work 1: Execute the following 
- 2 * 45
- 5%2
- 6*3+2
- (6*3)+2
- 55//10

# Section 2: Variables
A variable is a named location used to store data in the memory

Note: Variable names cannot be preceeded by a number and cannot be a keyword
"""

A30 = 5004

A30

a, b, c = 5, 3.2, "Hello"

a, b, c

"""# Section 3: Data Types
A variable name can store any type of data. The common Data types are
- Floating point data
- Integers
- Complex
- String
- Boolean
"""

# Float

a = 2.052       
type(a)

#String
b = 'The Hello World!'
type(b)

S = 'It sound"s great!'

#Integer
c = 65
type(c)

#Boolean
d = True
type(d)

c = 5 + 3j
(type(c))

"""Comments in Python
- Single line
- Multiple line
"""

# This is good

'This is a single line comment'

''' 
This is still a comment,
and still going, 
still going,
still going,...
'''

"""This is also a comment
And it's multi - line

## String Operation
 A string is defined as sequence of character enlosed in a quote.

### String Indexing

Since Strings are array of characters, string elements (characters) are accessible with the use of indices. The process of doing this is called **String Slicing**

**NOTE: Indexing starts at 0, Therefore, upperbound is always excluded**
"""

S1 = 'It"s so great!'
S2 = 'Nice being here'
#Slicing
S1[0], S1[-1], S1[6:11]

# String Concatenation: This is the process of joining two (2) or more strings together
S2 + S1

#String Length
S3 = S2 + S1
len(S3)

"""### String Methods 

Python has a set of built-in methods that you can use on strings. These methods return new values without changing the original string.

[Click here](http://python-ds.com/python-3-string-methods) for more
"""

'''capitalize()	Converts the first character to upper case
   upper()	Converts a string into upper case
'''
S1 = 'It"s so great!'
S2 = 'Nice being here'

S2.capitalize(), S1.upper()

S1.upper()

My_Name = "Mrs Chukwudi Olamide"

Status = My_Name.split()[0]
Gender = My_Name.split()[1]
First_Name = My_Name.split()[-1]

Status, Gender, First_Name

"""## Class Work 2: Practice at least 5 string methods on 
 S3 = 'It"s so great!, Nice being here'

# Section 4: Inputs and Outputs

### Inputs

This is a programme to request for a user's age and output a string "You are **Age** years old" where **Age** is the User's input
"""

age = input('How old are you? ')

"""Other interesting and sometimes, better ways of printing your output

### Outputs - Print Statement
"""

# One way of making your print statement more descriptive
print('You are', age, 'years old')


# One way of making your print statement more descriptive
print ('You are {} years old'.format(age))

# One way of making your print statement more descriptive
print ('You are %d years old' %(int(age)))

"""# Section 5: Program control flow /Control statements

These statements are use to specify the order of execution of instructs and loop over certain set of instructions if certain conditions are me. The basic control statement in Python includes

 - If... else if (elif)... end
 - For...
 - While... break

Write a program to check a user's age; if age is less than 20, print you're lucky to be here, if age is between 20 and 25, print make good use of this opportunity, if age is above 25, print print you are in the right place?
"""

'''The conditions are:
if age is less than 20, print you're lucky to be here;
if age is between 20 and 25, print make good use of this opportunity;
if age is above 25, print you are in the right place
'''
user_age = input('Input your age please: ')
user_age = int(user_age)                  # To convert user input to an integer
if user_age <= 0:                         # To check for invalid age input
    print('You have entered an invalid age')
elif user_age < 20 :
    print("You're lucky to be here")
elif user_age >= 20 and user_age <= 25:       
    print('Make good use of this opportunity')
else:                                    # This condition considers every other age bracket not included
    print('You are in the right place')

23

"""##### This is a programme to calculate the volume of cylinders and cones based on users' interest

$ Formula: $
- $ Cone: (1/3)*pi*r^2h $
- $ Cylinder: pi*r^2h $
"""

shape = input('What shape would you like to calculate? cone(c) or cyliner (cy) \n')
radius = int(input('What is the radius in cm? \n'))
height = int(input('What is the height in cm? \n'))

import math as m
if shape == 'c':
    my_shape = 'Cone'                           # Specifying the real shape name 
    volume = (1/3) * m.pi * (radius ** 2) * height
else:
    my_shape = 'Cylinder'                       # Real shape name
    volume = m.pi * (radius ** 2) * height
print(volume)

# One way of making your print statement more descriptive
print ('The volume of a ' + my_shape + ' with radius ' + str(radius) + 'cm and height ' + str(height) + 'cm is ' + str(volume) + 'cm3')

# Another descriptive method to print
output1 = 'The volume of a {} with radius {}cm, and height {}cm, is {}cm3' .format(my_shape, radius, height, volume)
print(output1)

# And yet another descriptive method of printing with decimal output instead of float
output2 = 'The volume of a %s with radius %dcm, and height %dcm, is %dcm3' %(my_shape, radius, height, volume)
print(output2)

"""Other interesting and sometimes, better ways of printing your output

## Assignments
#### To be done before the next class

- Write a program to convert the following degrees in Celsius to Fahrenheit
 - 50
 - 100
 - 0
 - 25
- Write a program to calculate simple interest, with the user specifying the principal, rate, and time.
- Write a program to check if a user defined year is leap year or not
- Write a program to check if a user defined number is odd or even

Hints:
 - $ Fahrenheit = 9/5C + 32 $
 - $ Celsius = 5/9(F - 32) $
 - $ Simple interest = PRT/100 $
 - $ Leap year = 366 days $

## N.B: Daily practice is essential to your progress. Have fun!
"""